% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualizeVariant.R
\name{visualizeVariant2}
\alias{visualizeVariant2}
\title{Visualize EVE scores of two variants for one gene.}
\usage{
visualizeVariant2(eveInfo1, eveInfo2, geneName = "X", aboveZeroOnly = FALSE)
}
\arguments{
\item{eveInfo1}{Tibble for the first variant with EVE scores for each residue
position that has a score calculated by EVE, residue position, wildtype amino
acid, and mutated amino acid.  If there are NaNs it means the variant
provided doesn't have an EVE score.}

\item{eveInfo2}{Tibble for the second variant with EVE scores for each
residue position that has a score calculated by EVE, residue position,
wildtype amino acid, and mutated amino acid.  If there are NaNs it means the
variant provided doesn't have an EVE score.}

\item{geneName}{String that is the name of the gene.  If not supplied the
default is X.}

\item{aboveZeroOnly}{Logical value that indicates whether to include EVE scores
of 0.  The default is FALSE so EVE scores of 0 will be included.  Note if
there are NaN values they will be excluded as well since they will be changed
to 0 first.}
}
\value{
A lollipop graph showing the EVE score at each residue position for
both variants.
}
\description{
A function that visualizes EVE scores for two variants of the same gene
simultaneously.  Function will replace EVE scores of NaN values with 0
}
\examples{
# Examples:
# First process the EVE data and variant data.
EvePath <- system.file("extdata", "NRX1B_HUMAN_SUBSET.vcf", package = "variantMapper")
EveData <- processEveData(EvePath)
EveData

# If the data is in protein form.
varDataProtPath <- system.file("extdata", "variant_data_protein.csv", package = "variantMapper")
varDataProt <- processVariantData(varDataProtPath, protein = TRUE)
varDataProt

eveScoresProt <- getEveScores(EveData, varDataProt, protein = TRUE)
eveScoresProt

# If the data is in genomic form.
varDataGenPath <- system.file("extdata", "variant_data_genomic.csv", package = "variantMapper")
varDataGen <- processVariantData(varDataGenPath, protein = FALSE)
varDataGen

eveScoresGen <- getEveScores(EveData, varDataGen, protein = FALSE)
eveScoresGen

compareVariantsPlot <- visualizeVariant2(eveScoresProt, eveScoresGen, "NRXN1")
compareVariantsPlot

compareVariantsPlotAboveZero <- visualizeVariant2(eveScoresProt, eveScoresGen, "NRXN1", aboveZeroOnly = TRUE)
compareVariantsPlotAboveZero

}
